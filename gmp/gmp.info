This is Info file gmp.info, produced by Makeinfo version 1.67 from the
input file gmp.texi.

INFO-DIR-SECTION GNU libraries
START-INFO-DIR-ENTRY
* gmp: (gmp).                   GNU Multiple Precision Arithmetic Library.
END-INFO-DIR-ENTRY

   This file documents GNU MP, a library for arbitrary-precision
arithmetic.

   Copyright (C) 1991, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000
Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.   ifnottex


File: gmp.info,  Node: Top,  Next: Copying,  Prev: (dir),  Up: (dir)

GNU MP
******

   This manual documents how to install and use the GNU multiple
precision arithmetic library, version 3.1.1.

   ifnottex

* Menu:

* Copying::                    GMP Copying Conditions (LGPL).
* Introduction to GMP::        Brief introduction to GNU MP.
* Installing GMP::             How to configure and compile the GMP library.
* GMP Basics::                 What every GMP user should now.
* Reporting Bugs::             How to usefully report bugs.
* Integer Functions::          Functions for arithmetic on signed integers.
* Rational Number Functions::  Functions for arithmetic on rational numbers.
* Floating-point Functions::   Functions for arithmetic on floats.
* Low-level Functions::        Fast functions for natural numbers.
* Random Number Functions::    Functions for generating random numbers.
* BSD Compatible Functions::   All functions found in BSD MP.
* Custom Allocation::          How to customize the internal allocation.

* Contributors::	       Who brings your this library?
* References::                 Some useful papers and books to read.
* Concept Index::
* Function Index::


File: gmp.info,  Node: Copying,  Next: Introduction to GMP,  Prev: Top,  Up: Top

GNU MP Copying Conditions
*************************

   This library is "free"; this means that everyone is free to use it
and free to redistribute it on a free basis.  The library is not in the
public domain; it is copyrighted and there are restrictions on its
distribution, but these restrictions are designed to permit everything
that a good cooperating citizen would want to do.  What is not allowed
is to try to prevent others from further sharing any version of this
library that they might get from you.

   Specifically, we want to make sure that you have the right to give
away copies of the library, that you receive source code or else can
get it if you want it, that you can change this library or use pieces
of it in new free programs, and that you know you can do these things.

   To make sure that everyone has such rights, we have to forbid you to
deprive anyone else of these rights.  For example, if you distribute
copies of the GNU MP library, you must give the recipients all the
rights that you have.  You must make sure that they, too, receive or
can get the source code.  And you must tell them their rights.

   Also, for our own protection, we must make certain that everyone
finds out that there is no warranty for the GNU MP library.  If it is
modified by someone else and passed on, we want their recipients to
know that what they have is not what we distributed, so that any
problems introduced by others will not reflect on our reputation.

   The precise conditions of the license for the GNU MP library are
found in the Lesser General Public License that accompany the source
code.


File: gmp.info,  Node: Introduction to GMP,  Next: Installing GMP,  Prev: Copying,  Up: Top

Introduction to GNU MP
**********************

   GNU MP is a portable library written in C for arbitrary precision
arithmetic on integers, rational numbers, and floating-point numbers.
It aims to provide the fastest possible arithmetic for all applications
that need higher precision than is directly supported by the basic C
types.

   Many applications use just a few hundred bits of precision; but some
applications may need thousands or even millions of bits.  GMP is
designed to give good performance for both, by choosing algorithms
based on the sizes of the operands, and by carefully keeping the
overhead at a minimum.

   The speed of GMP is achieved by using fullwords as the basic
arithmetic type, by using sophisticated algorithms, by including
carefully optimized assembly code for the most common inner loops for
many different CPUs, and by a general emphasis on speed (as opposed to
simplicity or elegance).

   There is carefully optimized assembly code for these CPUs: ARM, DEC
Alpha 21064, 21164, and 21264, AMD 29000, AMD K6 and Athlon, Hitachi
SuperH and SH-2, HPPA 1.0, 1.1 and 2.0, Intel Pentium, Pentium
Pro/Pentium II, generic x86, Intel i960, Motorola MC68000, MC68020,
MC88100, and MC88110, Motorola/IBM PowerPC 32 and 64, National NS32000,
IBM POWER, MIPS R3000, R4000, SPARCv7, SuperSPARC, generic SPARCv8,
UltraSPARC, DEC VAX, and Zilog Z8000.  Some optimizations also for
Clipper, IBM ROMP (RT), and Pyramid AP/XP.

   There is a mailing list for GMP users.  To join it, send a mail to
<gmp-request@swox.com> with the word `subscribe' in the message *body*
(not in the subject line).

   For up-to-date information on GMP, please see the GMP Home Pages at
http://www.swox.com/gmp/.

How to use this Manual
======================

   Everyone should read *Note GMP Basics::.  If you need to install the
library yourself, you need to read *Note Installing GMP::, too.

   The rest of the manual can be used for later reference, although it
is probably a good idea to glance through it.


File: gmp.info,  Node: Installing GMP,  Next: GMP Basics,  Prev: Introduction to GMP,  Up: Top

Installing GMP
**************

GMP has an autoconf/automake/libtool based configuration system.  On a
Unix-like system a basic build can be done with

     ./configure
     make

Some self-tests can be run with

     make check

And you can install (under `/usr/local' by default) with

     make install

If you experience problems, please report them to <bug-gmp@gnu.org>.
(*Note Reporting Bugs::, for information on what to include in useful
bug reports.)

* Menu:

* Build Options::
* ABI and ISA::
* Notes for Package Builds::
* Notes for Particular Systems::
* Known Build Problems::


File: gmp.info,  Node: Build Options,  Next: ABI and ISA,  Prev: Installing GMP,  Up: Installing GMP

Build Options
=============

All the usual autoconf configure options are available, run `./configure
--help' for a summary.

Non-Unix Systems
     `configure' needs various Unix-like tools installed.  On an MS-DOS
     system cygwin or djgpp should work.  It might be possible to build
     without the help of `configure', certainly all the code is there,
     but unfortunately you'll be on your own.

Object Directory
     To compile in a separate object directory, cd to that directory,
     and prefix the configure command with the path to the GMP source
     directory.  For example `../src/gmp/configure'.  Not all `make'
     programs have the necessary features (`VPATH') to support this.
     In particular, SunOS and Slowaris make have bugs that make them
     unable to build from a separate object directory.  Use GNU make
     instead.

-disable-shared, -disable-static
     By default both shared and static libraries are built (where
     possible), but one or other can be disabled.  Shared libraries are
     very slightly slower, having a small cost on each function call,
     but result in smaller executables and permit code sharing between
     separate running processes.

-target=CPU-VENDOR-OS
     The build target can be specified in the usual way, for either
     native or cross compilation.

     If -target isn't given, `./configure' builds for the host system
     as determined by `./config.guess'.  On some systems this can't
     distinguish between different CPUs in a family, and you should
     check the guess.  Running `./config.guess' on the target system
     will also show the relevant `VENDOR-OS', if you don't already know
     what it should be.

     In general, if you want a library that runs as fast as possible,
     you should configure GMP for the exact CPU type your system uses.
     However, this may mean the binaries won't run on older members of
     the family, and might run slower on other members, older or newer.
     The best idea is always to build GMP for the exact machine type
     you intend to run it on.

     The following CPU targets have specific assembly code support.  See
     `configure.in' for which `mpn' subdirectories get used by each.

        * Alpha: `alpha', `alphaev5', `alphaev6'

        * Hitachi: `sh', `sh2'

        * HPPA: `hppa1.0', `hppa1.1', `hppa2.0', `hppa2.0w'

        * MIPS: `mips', `mips3',

        * Motorola: `m68000', `m68k', `m88k', `m88110'

        * POWER: `power1', `power2', `power2sc', `powerpc', `powerpc64'

        * SPARC: `sparc', `sparcv8', `microsparc', `supersparc',
          `sparcv9', `ultrasparc', `sparc64'

        * 80x86 family: `i386', `i486', `i586', `pentium', `pentiummmx',
          `pentiumpro', `pentium2', `pentium3', `k6', `k62', `k63',
          `athlon'

        * Other: `a29k', `arm', `clipper', `i960', `ns32k', `pyramid',
          `vax', `z8k'

     CPUs not listed use generic C code.  If some of the assembly code
     causes problems, the generic C code can be selected with CPU
     `none'.

CC, CFLAGS
     The C compiler used is chosen from among some likely candidates,
     with GCC normally preferred if it's present.  The usual
     `CC=whatever' can be passed to `./configure' to choose something
     different.

     For some configurations specific compiler flags are set based on
     the target CPU and compiler, see `CFLAGS' in the generated
     `Makefile's.  The usual `CFLAGS="-whatever"' can be passed to
     `./configure' to use something different or to set good flags for
     systems GMP doesn't otherwise know.

     Note that if `CC' is set then `CFLAGS' must also be set.  This
     applies even if `CC' is merely one of the choices GMP would make
     itself.  This may change in a future release.

-disable-alloca
     By default, GMP allocates temporary workspace using `alloca' if
     that function is available, or `malloc' if not.  If you're working
     with large numbers and `alloca' overflows the available stack
     space, you can build with -disable-alloca to use `malloc' instead.
     `malloc' will probably be slightly slower than `alloca'.

     When not using `alloca', it's actually the allocation function
     selected with `mp_set_memory_functions' that's used, this being
     `malloc' by default.  *Note Custom Allocation::.

     Depending on your system, the only indication of stack overflow
     might be a segmentation violation.  It might be possible to
     increase available stack space with limit, ulimit or `setrlimit',
     or under DJGPP with stubedit or `_stklen'.

-enable-fft
     By default multiplications are done using Karatsuba and 3-way
     Toom-Cook algorithms, but a Fermat FFT can be enabled, for use on
     large to very large operands.  Currently the FFT is recommended
     only for knowledgeable users who check the algorithm thresholds
     for their CPU.

-enable-mpbsd
     The Berkeley MP compatibility library (`libmp.a') and header file
     (`mp.h') are built and installed only if -enable-mpbsd is used.
     *Note BSD Compatible Functions::.

MPN_PATH
     Various assembler versions of mpn subroutines are provided, and,
     for a given CPU target, a search is made though a path to choose a
     version of each.  For example `sparcv8' has path `"sparc32/v8
     sparc32 generic"', which means it looks first for v8 code, falls
     back on plain sparc32, and finally falls back on generic C.
     Knowledgeable users with special requirements can specify a path
     with `MPN_PATH="dir list"'.  This will normally be unnecessary
     because all sensible paths should be available under one or other
     CPU target.

Demonstration Programs
     The `demos' subdirectory has some sample programs using GMP.  These
     aren't built or installed, but there's a `Makefile' with rules for
     them.  For instance, `make pexpr' and then `./pexpr 68^975+10'.

Documentation
     The document you're now reading is `gmp.texi'.  The usual automake
     targets are available to make `gmp.ps' and/or `gmp.dvi'.  Some
     supplementary notes can be found in the `doc' subdirectory.


File: gmp.info,  Node: ABI and ISA,  Next: Notes for Package Builds,  Prev: Build Options,  Up: Installing GMP

ABI and ISA
===========

   ABI (Application Binary Interface) refers to the calling conventions
between functions, meaning what registers are used and what sizes the
various C data types are.  ISA (Instruction Set Architecture) refers to
the instructions and registers a CPU has available.

   Some 64-bit ISA CPUs have both a 64-bit ABI and a 32-bit ABI
defined, the latter for compatibility with older CPUs in the family.
GMP chooses the best ABI available for a given target system, and this
generally gives significantly greater speed.

   The burden is on application programs and cooperating libraries to
ensure they match the ABI chosen by GMP.  Fortunately this presents a
difficulty only on a few systems, and if you have one of them then the
performance gains are enough to make it worth the trouble.

   Some of what's described in this section may change in future
releases of GMP.

HPPA 2.0
     CPU target `hppa2.0' uses the hppa2.0n 32-bit ABI, but either a
     32-bit or 64-bit limb.

     A 64-bit limb is available on HP-UX 10 or up when using c89.  No
     gcc support is planned for 64-bit operations in this ABI.
     Applications must be compiled with the same options as GMP, which
     means

          c89  +DA2.0 +e -D_LONG_LONG_LIMB

     A 32-bit limb is used in other cases, and no special compiler
     options are needed.

     CPU target `hppa2.0w' uses the hppa2.0w 64-bit ABI, which is
     available on HP-UX 11 or up when using c89.  gcc support for this
     is in progress.  Applications must be compiled for the same ABI,
     which means

          c89  +DD64

MIPS 3 and 4 under IRIX 6
     Targets `mips*-*-irix6*' use the n32 ABI and a 64-bit limb.
     Applications must be compiled for the same ABI, which means either

          gcc  -mabi=n32
          cc   -n32

PowerPC 64
     CPU target `powerpc64' uses either the 32-bit ABI or the AIX
     64-bit ABI.  The latter is used on targets `powerpc64-*-aix*' and
     applications must be compiled using either

          gcc  -maix64
          xlc  -q64

     On other systems the 32-bit ABI is used, but with 64-bit limbs
     provided by `long long' in gcc.  Applications must be compiled
     using

          gcc  -D_LONG_LONG_LIMB

Sparc V9
     On a sparc v9 CPU, either the v8plus 32-bit ABI or v9 64-bit ABI
     is used.  Targets `ultrasparc*-*-solaris2.[7-9]',
     `sparcv9-*-solaris2.[7-9]' and `sparc64-*-linux*' use the v9 ABI,
     if the compiler supports it.  Other targets use the v8plus ABI
     (but with as much of the v9 ISA as possible in the circumstances).
     Note that Solaris prior to 2.7 doesn't save all registers
     properly, and hence uses the v8plus ABI.

     For the v8plus ABI, applications can be compiled with either

          gcc  -mv8plus
          cc   -xarch=v8plus

     For the v9 ABI, applications must be compiled with either

          gcc  -m64 -mptr64 -Wa,-xarch=v9 -mcpu=v9
          cc   -xarch=v9

     Don't be confused by the names of these options, they're called
     `arch' but they effectively control the ABI.


File: gmp.info,  Node: Notes for Package Builds,  Next: Notes for Particular Systems,  Prev: ABI and ISA,  Up: Installing GMP

Notes for Package Builds
========================

   GMP should present no great difficulties for packaging in a binary
distribution.

   Libtool is used to build the library and `-version-info' is set
appropriately, having started from `3:0:0' in GMP 3.0.  The GMP 3 series
will be upwardly binary compatible in each release, but may be adding
additional function interfaces.  On systems where libtool versioning is
not fully checked by the loader, an auxiliary mechanism may be needed
to express that a dynamic linked application depends on a new enough
minor version of GMP.

   When building a package for a CPU family, care should be taken to use
`--target' to choose the least common denominator among the CPUs which
might use the package.  For example this might necessitate `i386' for
x86s, or plain `sparc' (meaning V7) for SPARCs.

   Users who care about speed will want GMP built for their exact CPU
type, to make use of the available optimizations.  Providing a way to
suitably rebuild a package may be useful.  This could be as simple as
making it possible for a user to omit `--target' in a build so
`./config.guess' will detect the CPU.  But a way to manually specify a
`--target' will be wanted for systems where `./config.guess' is inexact.


File: gmp.info,  Node: Notes for Particular Systems,  Next: Known Build Problems,  Prev: Notes for Package Builds,  Up: Installing GMP

Notes for Particular Systems
============================

AIX 4.3
     Targets `*-*-aix4.[3-9]*' have shared libraries disabled since
     they seem to fail on AIX 4.3.

OpenBSD 2.6
     m4 in this release of OpenBSD has a bug in `eval' that makes it
     unsuitable for `.asm' file processing.  `./configure' will detect
     the problem and either abort or choose another m4 in the PATH.
     The bug is fixed in OpenBSD 2.7, so either upgrade or use GNU m4.

Sparc V8
     Using CPU target `sparcv8' or `supersparc' on relevant systems will
     give a significant performance increase over the V7 code.

SunOS 4
     /usr/bin/m4 lacks various features needed to process `.asm' files,
     and instead `./configure' will automatically use /usr/5bin/m4,
     which we believe is always available (if not then use GNU m4).

x86 Pentium and PentiumPro
     The Intel Pentium P5 code is good for its intended P5, but quite
     slow when run on Intel P6 class chips (PPro, P-II, P-III).  `i386'
     is a better choice if you're making binaries that must run on both.

x86 MMX and old GAS
     Old versions of GAS don't support MMX instructions, in particular
     version 1.92.3 that comes with FreeBSD 2.2.8 doesn't (and
     unfortunately there's no newer assembler for that system).

     If the target CPU has MMX code but the assembler doesn't support
     it, a warning is given and non-MMX code is used instead.  This
     will be an inferior build, since the MMX code that's present is
     there because it's faster than the corresponding plain integer
     code.

x86 GCC 2.95.2 `-march=pentiumpro'
     GCC 2.95.2 miscompiles `mpz/powm.c' when `-march=pentiumpro' is
     used, so that option is omitted from the CFLAGS chosen for relevant
     CPUs.  The problem is believed to be fixed in GCC 2.96.


File: gmp.info,  Node: Known Build Problems,  Prev: Notes for Particular Systems,  Up: Installing GMP

Known Build Problems
====================

   You might find more up-to-date information at
http://www.swox.com/gmp/.

Generic C on a 64-bit system
     When making a generic C build using `--target=none' on a 64-bit
     system (meaning where `unsigned long' is 64 bits),
     `BITS_PER_MP_LIMB', `BITS_PER_LONGINT' and `BYTES_PER_MP_LIMB' in
     `mpn/generic/gmp-mparam.h' need to be changed to 64 and 8.  This
     will hopefully be automated in a future version of GMP.

NeXT prior to 3.3
     The system compiler on old versions of NeXT was a massacred and
     old GCC, even if it called itself `cc'.  This compiler cannot be
     used to build GMP, you need to get a real GCC, and install that
     before you compile GMP.  (NeXT may have fixed this in release 3.3
     of their system.)

POWER and PowerPC
     Bugs in GCC 2.7.2 (and 2.6.3) mean it can't be used to compile GMP
     on POWER or PowerPC.  If you want to use GCC for these machines,
     get GCC 2.7.2.1 (or later).

Sequent Symmetry
     Use the GNU assembler instead of the system assembler, since the
     latter has serious bugs.

Stripped Libraries
     GNU binutils `strip' should not be used on the static libraries
     `libgmp.a' and `libmp.a', neither directly nor via `make
     install-strip'.  It can be used on the shared libraries
     `libgmp.so' and `libmp.so' though.

     Currently (binutils 2.10.0), `strip' extracts archives into a
     single directory, but GMP contains multiple object files of the
     same name (eg. three versions of `init.o'), and they overwrite
     each other, leaving only the one that happens to be last.

     If stripped static libraries are wanted, the suggested workaround
     is to build normally, strip the separate object files, and do
     another `make all' to rebuild.  Alternately `CFLAGS' with `-g'
     omitted can always be used if it's just debugging which is
     unwanted.

SunOS 4 Native Tools
     The setting for `GSYM_PREFIX' in `config.m4' may be incorrectly
     determined when using the native grep, leading at link-time to
     undefined symbols like `___gmpn_add_n'.  To fix this, after running
     `./configure', change the relevant line in `config.m4' to
     `define(<GSYM_PREFIX>, <_>)'.

