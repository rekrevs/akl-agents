@node Assoc, GM, Introduction, Top
@chapter Association Lists
@cindex association lists
@cindex lists, association

This package uses 2-3 trees to implement ``association lists'', i.e.
extendible finite mappings from terms to terms.  To load the package,
enter the query

@example
| ?- load(library(assoc)).
@end example
@table @code
@item empty_assoc(@var{-Assoc})
@findex empty_assoc/1
is true if @var{Assoc} is the empty association tree.
@item get_assoc(@var{+Key}, @var{-Value}, @var{+Assoc}, @var{-OutAssoc})
@findex get_assoc/4
is true when @var{Key} is associated with @var{Value} in the association
tree @var{Assoc}. The @var{OutAssoc} returned is identical to the input 
@var{Assoc} and is used only for synchronization (and compatibility with 
the array package).
@item get_def_assoc(@var{+Key}, @var{-Default}, @var{-Value}, @var{+Assoc}, @var{-OutAssoc})
@findex get_def_assoc/5
If @var{Assoc} associates a value with @var{Key}, that value is
@var{OldValue}. If @var{OldAssoc} did not associate any value at all with
@var{Key} then @var{OldValue} is unified with @var{Default}. 
The @var{OutAssoc} returned is identical to the input 
@var{Assoc} and is used only for synchronization (and compatibility with 
the array package).
@item get_nearest_le_assoc(@var{+SearchKey}, @var{-Key}, @var{-Value}, @var{+Assoc}, @var{-OutAssoc})
@findex get_nearest_le_assoc/5
is true if there exists a key in the association tree @var{Assoc} less than
or equal to @var{SearchKey}, and the largest such key is @var{Key} and is
associated with @var{Value}. 
The @var{OutAssoc} returned is identical to the input @var{Assoc} and is
used only for synchronization (and compatibility with the array package).
@item get_min_assoc(@var{-Key}, @var{-Value}, @var{+Assoc}, @var{-OutAssoc})
@findex get_min_assoc/4
is true if @var{Key} unifies with the smallest key in the non-empty 
association tree @var{Assoc} and @var{Value} unifies with the associated 
value. 
The @var{OutAssoc} returned is identical to the input @var{Assoc} and is
used only for synchronization (and compatibility with the array package).
@item get_max_assoc(@var{-Key}, @var{-Value}, @var{+Assoc}, @var{-OutAssoc})
@findex get_max_assoc/4
is true if @var{Key} unifies with the largest key in the non-empty
association tree @var{Assoc} and @var{Value} unifies with the associated 
value. 
The @var{OutAssoc} returned is identical to the input @var{Assoc} and is
used only for synchronization (and compatibility with the array package).
@item set_assoc(@var{+Key}, @var{-OldValue}, @var{-NewValue}, @var{+OldAssoc}, @var{-NewAssoc})
@findex set_assoc/5
is true when @var{OldAssoc} and @var{NewAssoc} are association trees of
the same shape having the same elements except that the value for
@var{Key} in @var{OldAssoc} is @var{OldValue} and the value for
@var{Key} in @var{NewAssoc} is @var{NewValue}.
@item set_def_assoc(@var{+Key}, @var{-Default}, @var{-OldValue}, @var{-NewValue}, @var{+OldAssoc}, @var{-NewAssoc})
@findex set_def_assoc/6
is true when @var{OldAssoc} and @var{NewAssoc} define the same finite
function, except that @var{NewAssoc} associates @var{Val} with @var{Key}.
If @var{OldAssoc} associated a value with @var{Key}, that value is
@var{OldValue}. If @var{OldAssoc} did not associate any value at all with
@var{Key} then @var{OldValue} is unified with @var{Default}. 
@item put_assoc(@var{+Key}, @var{-Val}, @var{+OldAssoc}, @var{-NewAssoc})
@findex put_assoc/4
is true when @var{OldAssoc} and @var{NewAssoc} define the same finite
function, except that @var{NewAssoc} associates @var{Val} with @var{Key}.
@var{OldAssoc} need not have associated any value at all with @var{Key}.
@item delete_assoc(@var{+Key}, @var{-Val}, @var{+OldAssoc}, @var{-NewAssoc})
@findex delete_assoc/4
is true when @var{OldAssoc} and @var{NewAssoc} define the same finite
function, except that while @var{OldAssoc} associated @var{Val} with 
@var{Key}, @var{NewAssoc} does not associate any value at all with @var{Key}.
@item delete_def_assoc(@var{+Key}, @var{-Default}, @var{-Val}, @var{+OldAssoc}, @var{-NewAssoc})
@findex delete_def_assoc/5
is true when @var{OldAssoc} and @var{NewAssoc} define the same finite
function, except that @var{NewAssoc} does not associate any value at all 
with @var{Key}. 
If @var{OldAssoc} associated a value with @var{Key}, that value is
@var{OldValue}. If @var{OldAssoc} did not associate any value at all with
@var{Key} then @var{OldValue} is unified with @var{Default}. 
@item delete_min_assoc(@var{-Key}, @var{-Val}, @var{+OldAssoc}, @var{-NewAssoc})
@findex delete_min_assoc/4
is true when @var{OldAssoc} and @var{NewAssoc} define the same finite
function, except that while @var{OldAssoc} associated @var{Val} with 
@var{Key}, which was the smallest key in @var{OldAssoc}, @var{NewAssoc} 
does not associate any value at all with @var{Key}.
@item delete_max_assoc(@var{-Key}, @var{-Val}, @var{+OldAssoc}, @var{-NewAssoc})
@findex delete_max_assoc/4
is true when @var{OldAssoc} and @var{NewAssoc} define the same finite
function, except that while @var{OldAssoc} associated @var{Val} with 
@var{Key}, which was the largest key in @var{OldAssoc}, @var{NewAssoc} 
does not associate any value at all with @var{Key}.
@item gen_assoc(@var{-Key}, @var{+Assoc}, @var{-Value})
@findex gen_assoc/3
is true when @var{Key} is associated with @var{Value} in the association
tree @var{Assoc}.  Can be used to enumerate all @var{Values} by
ascending @var{Keys}.
@item map_assoc(@var{:Pred}, @var{-OldAssoc}, @var{-NewAssoc})
@findex map_assoc/3
is true when @var{OldAssoc} and @var{NewAssoc} are association trees of
the same shape, and for each @var{Key}, if @var{Key} is associated with
@var{Old} in @var{OldAssoc} and with @var{New} in @var{NewAssoc},
@var{Pred(Old,New)} is true.
@item assoc_to_list(@var{+Assoc}, @var{-List})
@findex assoc_to_list/3
is true when @var{List} is a list of @var{Key-Value} pairs in ascending
order with no duplicate @var{Keys} specifying the same finite function
as the association tree @var{Assoc}.  Use this to convert an association
tree to a list.
@item list_to_assoc(@var{+List}, @var{-Assoc})
@findex list_to_assoc/2
is true when @var{List} is a proper list of @var{Key-Value} pairs (in
any order) and @var{Assoc} is an association tree specifying the same
finite function from @var{Keys} to @var{Values}.
@item ord_list_to_assoc(@var{+List}, @var{-Assoc})
@findex ord_list_to_assoc/2
is true when @var{List} is a proper list of @var{Key-Value} pairs
(keysorted) and @var{Assoc} is an association tree specifying the same
finite function from @var{Keys} to @var{Values}.
@end table
