% $Id: scanner.akl,v 1.20 1994/03/25 14:51:50 jm Exp $
%%%%    A scanner program to reveal the content of a box.
%%%%	By Johan Montelius 


scanner:- stdout(S),
	write('This is a program that examines the content of')-S,fnl-S,
	write('a box. The input is the number of "X" on each')-S,fnl-S,
	write('row, column, left diagonal and right diagonal.')-S,fnl-S,
	write('The problem was described in by A.K. Dewdney in')-S,fnl-S,
	write('"Scientific American Sept, 90, p124" ')-S,fnl-S,
	write('Predicates:')-S, fnl-S,
	write('             one(Sample), shows first image from Sample,')-S,fnl-S,
	write('             all(Sample), shows all images from Sample,')-S,fnl-S,
	write('Sample is one of: small, double, snake, alp, many or meow.')-S,fnl-S.


% use this goal if yoy want to step trough different solutions,
% or count the number of solutions using arity/2

cat(Sample,Image) :- 
	sample(Sample,R,C,D1,D2), 
	scanner(proc,R,C,D1,D2,Image).

cat(Sample,Image,Method) :-
	sample(Sample,R,C,D1,D2), 
	scanner(Method,R,C,D1,D2,Image).

% all/1 and all/2 will find all solutions, print them out
% and display runtime and number of nondeterministic promotions.
% The mode is either line or proc

all(Sample) :- all(Sample,proc).

all(Sample, Method) :-
	sample(Sample,R,C,D1,D2), 
	format('Rows ~w~nColumns ~w~nLeft diagonals ~w~nRight diagonals ~w~n~n', [R,C,D1,D2]),
	statistics(runtime,_),
	statistics(nondet,_),
	bagof(Image\scanner(Method,R,C,D1,D2,Image), Images)
    ->	statistics(runtime,[_,Time]),
	statistics(nondet,[_,Nondet]),
	dimages(Images),
	format('Solved in ~w msec. ~w nondeterminstic steps were needed~n', [Time,Nondet]).

% one/2 will find the first solution, print it
% out and display runtime. The mode is either line or proc

one(Sample) :- one(Sample,proc).

one(Sample, Method) :- 
	sample(Sample,R,C,D1,D2),
	format('Rows ~w~nColumns ~w~nLeft diagonals ~w~nRight diagonals ~w~n~n', [R,C,D1,D2]), 
	statistics(runtime,_),
	statistics(nondet,_),
	scanner(Method,R,C,D1,D2,Image)
    ->	statistics(runtime,[_,Time]),
	statistics(nondet,[_,Nondet]),
	dimage(Image),
	format('Solved in ~w msec. ~w nondeterminstic steps were needed~n', [Time,Nondet]).


% sec/2 will take list of samples i.e. [snake,snake,snake] 
% The mode is either local or global

seq(Spec,Mode) :-
	statistics(runtime,_),
	statistics(copytime,_),
	statistics(nondet,_),
	seq(Spec,Mode,Images)
    ->	statistics(runtime,[_,Run]),
	statistics(copytime,[_,Copy]),
	statistics(nondet,[_,Nondet]),
	dimages(Images), 
	format('Solved in ~w msec.~nCopied for ~w msec  in ~w nondeterminstic steps.~n', [Run,Copy,Nondet]).


seq([],_,Images) :-
    ->	Images = [].
seq([Sample|Samples], Mode, Images) :-
    ->	local(Sample,Mode,Image),
	Images = [Image|Imgs],
	seq(Samples,Mode,Imgs).

/* If the computation is encapsulated in a deep guard
 * local forking is allowed. The different computations
 * need not be synchronized. The structures that need to
 * be copied in a nondeterminsitic step is proportional
 * only to the local computations not to the number of
 * computations.
 */

local(Sample, local, Image) :-
	sample(Sample,R,C,D1,D2),
	scanner(proc,R,C,D1,D2,I) ?
	Image = I.

local(Sample, global, Image) :- ?
	sample(Sample,R,C,D1,D2),
	scanner(proc,R,C,D1,D2,I), 
	Image = I.


/* Some samples of x-ray images */

sample(small, % yes this is small
	[1,2,1],
	[2,1,1],
	[1,1,1,0,1],
	[0,0,3,1,0]).

sample(double, % two solutions
	[2,2,3,2,2,1],
	[1,3,3,1,3,1], 
	[0,1,1,2,1,2,3,1,1,0,0],
	[0,2,0,1,2,2,2,1,2,0,0]).

sample(snake, % one solution, can be run with both line and proc
	[4,2,6,2,4,4,3,2],
	[3,5,5,3,2,3,3,3],
	[1,2,2,1,1,2,5,2,2,3,3,2,1,0,0],
	[0,1,0,3,2,2,4,3,3,3,1,3,2,0,0]).

sample(many, % over a thousand solutions, don't run all on this 
	[3,3,4,3,3,4,5,2],
	[3,4,3,3,4,4,3,3],
	[0,1,1,2,2,2,4,3,3,3,2,2,1,1,0],
        [0,1,1,2,3,3,2,2,4,2,2,2,2,1,0]).

sample(alp,
	[0,0,2,5,5,8,5,5,2,0,0],
	[0,0,7,2,2,2,0,3,3,3,0,7,1,1,1,0,0],
	[0,0,0,0,1,1,1,2,2,3,3,2,2,2,3,2,2,2,2,2,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,2,2,2,2,2,3,2,2,2,3,3,2,2,1,1,1,0,0,0,0]).

sample(meow, % a cat, no nondeterministic step is needed if you use proc
	[1,13,17,17,14,14,12,6,6,6], 
	[2,1,1,3,3,6,6,8,9,7,5,5,5,5,6,8,8,8,4,4,2], 
	[0,0,0,0,0, 1,2,5,6,4, 4,6,7,7,8, 8,5,6,6,6, 6,5,5,3,3, 1,1,1,0,0],
        [0,1,2,3,3, 3,2,4,5,5, 7,9,9,6,6, 5,4,5,5,4, 5,4,2,2,2, 2,1,0,0,0]).

% samples from Andorra-I */ 
sample(vt100, /* ??? */
	[0,0,0,26,20,13,13,11,11,11,12,11,11,10,13,24,18,2,2,14,2,16,9,26,15,25,13,16,28,6,0,0],
	[0,6,18,6,8,21,20,14,14,15,14,13,12,13,13,13,12,14,14,16,14,20,16,3,10,7,11,8,10,17,6,0],
	[0,0,0,0,0,0,2,2,2,3,4,5,6,5,8,5,10,5,11,5,12,3,14,7,10,6,16,10,14,10,13,12,11,13,11,13,8,10,5,10,6,10,6,9,5,7,5,6,5,5,7,4,5,4,4,4,3,2,0,0,0,0,0],
	[0,0,0,0,0,0,2,2,2,2,2,2,2,3,4,5,5,7,5,10,6,10,6,13,8,15,7,12,8,19,10,17,9,15,12,14,12,10,12,9,11,7,8,5,8,5,8,7,7,4,7,3,6,2,4,3,4,2,0,0,0,0,0]).
	
sample(queens, 
	[0,0,2,2,8,8,2,2,2,8,6,10,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,8,6,30,30,0],
	[0,7,5,5,3,4,3,5,7,7,6,6,7,6,7,29,29,7,6,7,6,6,7,7,5,3,4,3,5,5,7,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,3,7,9,6,7,7,7,5,7,6,6,5,6,8,6,7,8,5,5,5,6,5,5,6,5,5,3,3,4,4,3,4,4,4,2,3,3,3,3,3,2,1,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,4,3,7,9,6,7,7,7,5,7,6,6,5,6,8,6,7,8,5,5,5,6,5,5,6,5,5,3,3,4,4,3,4,4,4,2,3,3,3,3,3,2,1,0,0]).

sample(left_ptr, /* deterministic */
	[0,1,2,3,4,5,6,7,8,5,4,3,2,2,2,0],
	[0,0,0,11,9,7,7,8,7,4,1,0,0,0,0,0],
	[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,3,4,2,2,2,1,1,2,1,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,8,7,6,5,5,6,7,5,3,1,1,0,0,0,0,0,0,0]).

sample(mailemptymsk, /* deterministic */
	[0,0,0,40,41,42,43,44,45,46,47,48,48,48,48,48,47,46,45,44,44,16,16,16,44,44,45,46,47,48,48,48,48,48,48,48,48,47,46,45,44,44,12,8,8,8,8,8],
	[37,38,39,40,27,29,31,33,40,40,40,40,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,45,45,45,45,32,30,28,26,39,39,39,39],
	[0,0,0,0,0,0,0,0,0,0,0,9,10,11,12,13,14,15,16,17,18,19,20,21,22,22,22,22,22,23,24,25,26,30,30,30,31,32,33,34,35,36,37,38,39,40,40,40,39,38,38,36,35,34,32,31,30,30,30,26,25,24,23,22,22,22,22,22,21,20,19,18,17,16,15,14,13,12,12,12,8,8,8,8,7,6,4,2,1,0,0,0,0,0,0],
	[0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,18,19,19,20,20,21,23,25,27,29,30,30,30,30,31,32,33,34,35,35,35,33,33,31,32,31,32,32,33,33,34,34,34,33,32,31,31,30,29,27,25,23,21,20,20,19,19,18,18,17,17,16,15,14,13,12,12,11,10,9,7,6,5,4,4,4,4,4,4,4,3,2,1]).

sample(star,  /* 25 solutions */
	[0,1,1,3,3,3,2,10,2,3,3,3,1,1,0,0],
	[0,1,1,3,3,3,2,10,2,3,3,3,1,1,0,0],
	[0,0,0,0,0,0,1,0,3,2,3,2,3,0,8,0,3,2,3,2,3,0,1,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,1,0,3,2,3,2,3,0,8,0,3,2,3,2,3,0,1,0,0,0,0,0,0,0]).

sample(boxes,
	[8,4,4,8,8,4,4,8,8,4,4,8,8,4,4,8],
        [8,4,4,8,8,4,4,8,8,4,4,8,8,4,4,8],
        [1,2,2,2,2,2,1,0,3,6,6,6,6,6,3,0,3,6,6,6,6,6,3,0,1,2,2,2,2,2,1],
        [0,0,0,0,2,4,4,4,4,4,2,0,4,8,8,8,8,8,4,0,2,4,4,4,4,4,2,0,0,0,0]).


/* This is the main predicate in the scanner program */

scanner(Method,RwData,ClData,D1Data, D2Data, Rws) :- 
	length(RwData,R),
	length(ClData,C),
	board(R,C,All,Rws,Cls,D1,D2), 
	check(RwData,Method,Rws),
	check(ClData,Method,Cls),
	check(D1Data,Method,D1),
	check(D2Data,Method,D2),
	domain(Method,All).


/* There are two ways to check a line, the simple way 
 * and the more complex way. 
 */


check([],_Method,[]) :-
    ->	true.
check([K|RwsD],Method,[R|Rws]) :-
    ->	length(R,L),
	check(Method,K,L,R),
	check(RwsD,Method,Rws).

check(line,K,L,R) :-
    ->	line(K,L,R).
check(proc,K,L,R) :-
    ->	open_port(P,I),spawn(R,S,P),controller(K,L,I,S).

/* Since the processor model can not generate solutions a 
 * nondeterministic process is needen to break a dead-
 * lock.
 */

domain(line,_).
domain(proc,All) :- domain(All).

domain([]).
domain([E|R]) :-
   pixle(E) ?
   domain(R).

pixle(on).
pixle(off).

/* This is the moste simple way to check if a line has 
 * K out of L elements turned on. Th eproblem is that
 * goals such as line(2,4,[A,on,B,on]) not are deter-
 * ministic. This is because only th ehead of the list
 * is part of the guard. The goal copuld be encapsulated
 * in a local computation but this would result in to
 * much speculative work.
 */

line(0,0,[]).
line(K,L,[on|R]) :-
	K > 0
    ?	K1 is K-1,
	L1 is L-1,
	line(K1,L1,R).
line(K,L,[off|R]) :-
	L > K
    ?	L1 is L-1,
	line(K,L1,R).

/* A more elaborate way of controlling the line is to 
 * create a monitor process for each element in the line.
 * The monitors will report to a copntroller process as
 * soon as an element is determined. The controller will
 * make sure taht the messages are consistent. If a deter-
 * ministic situation occures the controller will issue
 * a message to the remaining monitors to either turn 
 * their element on or off.
 */

spawn([],_,_) :-
    ->	true.
spawn([E|R],S,P) :-
    ->	monitor(E,S,P),
	spawn(R,S,P).


controller(0, L, M, S) :-
    ->	S = off,
	turned(L, M, off).
controller(K, L, M, S) :-
	L = K
    ->	S = on,
	turned(L, M, on).
controller(K, L, [Ms|M], S) :-
    ->	controller0(Ms, K, L, M, S).

controller0(on, K, L, M, S) :-
    ->	K > 0,
	K1 is K-1,
	L1 is L-1,
	controller(K1, L1, M, S).
controller0(off, K, L, M, S) :- 
    ->	L > K,
	L1 is L-1,
	controller(K, L1, M, S).

turned(0,_,_) :-
    ->	true.
turned(N,[Val|S],Val) :-
    ->	N1 is N-1,
	turned(N1,S,Val).

check([]) :-
    ->	true.
check([_|R]) :-
    ->	check(R).

monitor(X, _S, P) :- 
	atom(X)
    |	X@P.
monitor(X, V, P) :-
	atom(V)
    |	X = V,
	X@P.

/* board(R,C,All,Rows,Columns,Rights,Left) constructs a grid RxC with one
 * variable per square. All is a list of all variables, Rows is list of
 * all rows, each row represented as alist of its variables. The same
 * hold for Columns, Right(diagonals) and Left(diagonals)
 */

board(0,C,[],[],Cls,D,D) :- 
	C > 0
    ?	C1 is C-1,
	seed(C,Cls),
	seed(C1,D).
board(R,C,All,[Row|Rws],Cols,Rdiag,Ldiag) :- 
	R > 0
    ?	R1 is R-1,
	row(C, Row),
	all(Row,Al,All),
	column(Row,Cls,Cols),
	diagonal(Row,Rdg,Rdiag),
	rev(Row, Rev),
	diagonal(Rev,Ldg,Ldiag),
	board(R1,C,Al,Rws,Cls,Rdg,Ldg).

seed(0, S) :-
    ->	S = [].
seed(C, S) :-
    ->	S = [[]|S1],
	C1 is C-1,
	seed(C1,S1).

all([], Al, All) :-
    ->	All = Al.
all([H|Row], Al, All) :-
    ->	All = [H|All1],
	all(Row, Al, All1).

row(0, R) :-
    ->	R = [].
row(C, R) :-
    ->  R = [_|R1],
	C1 is C-1,
	row(C1, R1).

column([], Cls, Columns) :-
    ->	Columns = Cls.
column([H|R], Cls, Columns) :- 
    ->	Cls = [Cl|Cls1],
	Columns = [[H|Cl]|Columns1],
	column(R, Cls1, Columns1).

diagonal([H|Row],Dg, [[H]|Diag]) :- column(Row,Dg,Diag).

rev(List, Reversed) :-
	rev(List, [], Reversed).

rev([], Y, Z) :-
    ->	Z = Y.
rev([H|T],Y,Z) :-
    ->	rev(T,[H|Y],Z).


/* to display an image */

dimages(Image) :- stdout(S), dimages(Image, S, _).

dimage(Image) :-  stdout(S), dimage(Image, S, _).

dimages([])-S:-
    ->	fnl-S.
dimages([I|Imgs])-S:-
    ->	dimage(I)-S,
	dimages(Imgs)-S.



dimage(Image)-S:- 
	fnl-S, drows(Image)-S, fnl-S.

drows([])-_S:-
    ->	true.
drows([R|Rws])-S:-
    ->	dtab-S,
	drow(R)-S, 
	fnl-S,
	drows(Rws)-S.

dtab-S:- write('    ')-S.

drow([])-_S :-
    ->	true.
drow([on|R])-S:-
    ->	write('* ')-S,
	drow(R)-S.
drow([off|R])-S:-
    ->	write('  ')-S,
	drow(R)-S.




