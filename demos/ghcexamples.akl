% $Id: ghcexamples.akl,v 1.8 1993/10/22 12:55:53 sverker Exp $
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
       %%%%%              SAMPLE GHC PROGRAMS              %%%%%
       %%%%%  (Explained in ICOT Technical Report TR-209)  %%%%%
       %%%%%                                               %%%%%
       %%%%%              Kazunori Ueda, ICOT              %%%%%
       %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%% List Concatenation %%%%%
concat([A|X1], Y, Z) :- | Z=[A|Z1], concat(X1, Y, Z1).
concat([],     Y, Z) :- | Z=Y.

%%%%% Quicksort %%%%%
quicksort(Xs, Ys) :- | qsort(Xs, Ys, []).

qsort([X|Xs], Ys0, Ys3) :- |
    part(Xs, X, S, L),
    qsort(S, Ys0, Ys1), Ys1=[X|Ys2], qsort(L, Ys2, Ys3).
qsort([],     Ys0, Ys1) :- | Ys0=Ys1.

part([X|Xs], A, S,  L0) :- A <  X | L0=[X|L1], part(Xs, A, S,  L1).
part([X|Xs], A, S0, L ) :- A >= X | S0=[X|S1], part(Xs, A, S1, L ).
part([],     _, S,  L ) :-        | S=[], L=[].

%%%%% Prime Number Generation %%%%%
primes(Max) :- | primes(Max,Ps), outterms(Ps,Os), outstream(Os).

primes(Max,Ps) :- | gen(2,Max,Ns), sift(Ns,Ps).

gen(N0,Max,Ns0) :- N0=<Max | Ns0=[N0|Ns1], N1 is N0+1, gen(N1,Max,Ns1).
gen(N0,Max,Ns0) :- N0 >Max | Ns0=[].

sift([P|Xs1],Zs0) :- | Zs0=[P|Zs1], filter(P,Xs1,Ys), sift(Ys,Zs1).
sift([],     Zs0) :- | Zs0=[].

filter(P,[X|Xs1],Ys0) :- X mod P=\=0 | Ys0=[X|Ys1], filter(P,Xs1,Ys1).
filter(P,[X|Xs1],Ys0) :- X mod P=:=0 |              filter(P,Xs1,Ys0).
filter(_,[],     Ys0) :-             | Ys0=[].

outterms([X|Xs1], Os0) :- | Os0=[write(X),nl|Os1], outterms(Xs1,Os1).
outterms([],      Os0) :- | Os0=[].

% GENERATING TWIN PRIMES
twins(Max) :- |
    primes(Max,Ps), twin(Ps,Ts), outterms(Ts,Os), outstream(Os).

twin([P1,P2|Ps2],Ts) :- P2=\=P1+2 | twin([P2|Ps2],Ts).
twin([P1,P2|Ps2],Ts) :- P2=:=P1+2 | Ts=[(P1,P2)|Ts1],twin([P2|Ps2],Ts1).
twin([_],        Ts) :-           | Ts=[].
twin([],         Ts) :-           | Ts=[].

% FINDING THE LARGEST GAP IN A PRIME SEQUENCE
gaps(Max) :- |
    primes(Max,Ps), gap(Ps,Gs,0), outterms(Gs,Os), outstream(Os).

gap([P1,P2|Ps2],Gs,G) :- P3 is P2-P1, P3=<G | gap([P2|Ps2],Gs,G).
gap([P1,P2|Ps2],Gs,G) :- P3 is P2-P1, P3>G |
    G1 is P2-P1, Gs=[(P1,P2)|Gs1], gap([P2|Ps2],Gs1,G1).
gap([_],        Gs,_) :- | Gs=[].
gap([],         Gs,_) :- | Gs=[].

%%%%% Lazy Generation of Fibonacci Numbers %%%%%
% PROBLEMATIC PROGRAM (eager version)
% fib :- | fibonacci(Ns), outterms(Ns,Os), outstream(Os).
% fibonacci(Ns)        :- | fib(1,0,Ns).
% fib(N1,N2,Ns0) :- | N3 is N1+N2, Ns0=[N3|Ns1], fib(N2,N3,Ns1).

% LAZY VERSION
fiblazy :- | fibonaccilazy(Ns), driver(Ns,IOs), instream(IOs).

fibonaccilazy(Ns) :- | fiblazy(1,0,Ns).
fiblazy(N1,N2,[N3|Ns1]) :- | N3 is N1+N2, fiblazy(N2,N3,Ns1).
fiblazy(_, _, [])       :- | true.

driver(Ns ,IOs0) :- | IOs0=[read(X)|IOs1], checkinput(Ns,IOs1,X).

checkinput(Ns0,IOs0,more) :- |
    Ns0=[N|Ns1], IOs0=[write(N),nl|IOs1], driver(Ns1,IOs1).
checkinput(Ns, IOs ,done) :- | Ns=[], IOs=[].


% instream and outstream for GHC-examples

instream(S) :- | io(S).

outstream(S) :- | io(S).

io([]):- | true.
io([Req|S]) :- | do_io(Req, S).


do_io(read(X),   S) :- read(Y) -> X = Y, io(S).
do_io(write(X),  S) :- ground_write(X) -> io(S).  
do_io(nl,        S) :- nl -> io(S).

ground_write(X) :- ground(X) -> stdout(S), write(X,S,_).

ground(X) :- atomic(X) | true.
ground(X) :- compound(X) |
	functor(X,_,N),
	ground_args(N,X).

ground_args(0,_) :- -> true.
ground_args(N,X) :- ->
	arg(N, X, A),
	ground(A),
	N1 is N-1,
	ground_args(N1,X).


